<?xml version="1.0" encoding="UTF-8"?>
<!--
  Atom Torture Test Suite: SVG Content

  Original source: Jacques Distler's "Atom Torture Test" (April 18, 2006)
  URL: https://golem.ph.utexas.edu/~distler/blog/archives/000793.html

  These tests validate proper handling of:
  1. Inline SVG vector graphics within XHTML content
  2. SVG with object/img fallback patterns
  3. Complex SVG features (paths, gradients, foreignObject)
  4. Security (XSS prevention via SVG event handlers and scripts)

  Rogue Planet Policy:
  - SVG elements may be stripped or limited depending on bluemonday policy
  - Object tags completely removed (prevents Flash/Java/plugin exploits)
  - Nested img fallbacks also removed (unavoidable with object removal)
  - Recommendation: Use <img src="file.svg"> instead of object pattern

  For more details, see: specs/research/ATOM_TORTURE_TEST_RESEARCH.md
-->
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Atom Torture Test: SVG Content</title>
  <link href="https://example.com/"/>
  <updated>2006-04-15T12:00:00Z</updated>
  <id>https://example.com/atom-torture-svg</id>
  <author>
    <name>Jacques Distler</name>
  </author>

  <!-- Test 1: Simple inline SVG -->
  <entry>
    <title>Simple SVG Circle</title>
    <link href="https://example.com/svg1"/>
    <id>https://example.com/svg1</id>
    <updated>2006-04-15T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Here's a red circle drawn with SVG:</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">
          <circle cx="50" cy="50" r="40" fill="red" stroke="black" stroke-width="2"/>
        </svg>
        <p>This should display as a vector graphic.</p>
      </div>
    </content>
  </entry>

  <!-- Test 2: SVG with fallback image -->
  <entry>
    <title>SVG with Image Fallback</title>
    <link href="https://example.com/svg2"/>
    <id>https://example.com/svg2</id>
    <updated>2006-04-15T11:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This SVG has a fallback image for readers that don't support SVG:</p>
        <object data="diagram.svg" type="image/svg+xml" width="200" height="200">
          <img src="https://example.com/diagram-fallback.png" alt="Diagram fallback" width="200" height="200"/>
        </object>
        <p>At minimum, the fallback image should be displayed.</p>
      </div>
    </content>
  </entry>

  <!-- Test 3: SVG with complex shapes -->
  <entry>
    <title>Complex SVG Drawing</title>
    <link href="https://example.com/svg3"/>
    <id>https://example.com/svg3</id>
    <updated>2006-04-15T10:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>A more complex SVG with multiple shapes:</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="200" height="150" viewBox="0 0 200 150">
          <rect x="10" y="10" width="80" height="60" fill="blue" stroke="navy" stroke-width="2"/>
          <circle cx="140" cy="40" r="30" fill="yellow" stroke="orange" stroke-width="2"/>
          <line x1="10" y1="100" x2="190" y2="100" stroke="green" stroke-width="3"/>
          <text x="100" y="130" text-anchor="middle" font-size="16" fill="black">Test SVG</text>
        </svg>
      </div>
    </content>
  </entry>

  <!-- Test 4: SVG security test - event handlers should be stripped -->
  <entry>
    <title>SVG Security Test</title>
    <link href="https://example.com/svg4"/>
    <id>https://example.com/svg4</id>
    <updated>2006-04-15T09:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This SVG attempts XSS via event handlers (should be sanitized):</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" onload="alert('XSS')">
          <circle cx="50" cy="50" r="40" fill="red" onclick="alert('XSS')"/>
          <script>alert('XSS')</script>
        </svg>
        <p>No scripts should execute.</p>
      </div>
    </content>
  </entry>

  <!-- Test 5: SVG with foreignObject (advanced feature) -->
  <entry>
    <title>SVG with foreignObject</title>
    <link href="https://example.com/svg5"/>
    <id>https://example.com/svg5</id>
    <updated>2006-04-15T08:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>SVG can embed HTML via foreignObject:</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="200" height="100">
          <foreignObject x="10" y="10" width="180" height="80">
            <div xmlns="http://www.w3.org/1999/xhtml">
              <p>This is HTML inside SVG!</p>
            </div>
          </foreignObject>
        </svg>
        <p>This is an advanced SVG feature.</p>
      </div>
    </content>
  </entry>

  <!-- Test 6: Alternative fallback pattern with picture element style -->
  <entry>
    <title>Multiple Fallback Layers</title>
    <link href="https://example.com/svg6"/>
    <id>https://example.com/svg6</id>
    <updated>2006-04-15T07:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Image with multiple fallback options:</p>
        <img src="https://example.com/graphic.svg" alt="A graphic illustration" width="300" height="200"/>
        <p>If SVG is supported in img tags, it displays; otherwise the alt text is shown.</p>
      </div>
    </content>
  </entry>

  <!-- Test 7: Inline SVG with paths and gradients -->
  <entry>
    <title>SVG with Paths and Gradients</title>
    <link href="https://example.com/svg7"/>
    <id>https://example.com/svg7</id>
    <updated>2006-04-15T06:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>SVG with gradient fill:</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="200" height="100" viewBox="0 0 200 100">
          <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
              <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />
            </linearGradient>
          </defs>
          <path d="M 10 50 Q 50 10 100 50 T 190 50" stroke="blue" stroke-width="3" fill="none"/>
          <ellipse cx="100" cy="50" rx="80" ry="30" fill="url(#grad1)"/>
        </svg>
      </div>
    </content>
  </entry>
</feed>
